{"version":3,"sources":["serviceWorker.js","component/Card.js","component/CardList.js","component/SearchBox.js","component/Scroll.js","container/App.js","action.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","id","name","email","className","alt","src","CardList","LoopRobo","robots","map","user","i","key","SearchBox","searchfield","searchchange","for","type","placeholder","onChange","Scroll","props","children","App","this","onRequestRobots","searchField","onSearchChange","isPending","searchfilter","filter","x","toLowerCase","includes","style","color","Component","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","intialState","intialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a75404e9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\n\r\nconst Card = ({id, name, email}) => {\r\n    \r\n    return(\r\n        <div className = 'bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img  alt = 'robo' src={`https://robohash.org/${id}?200x200`} />\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../component/Card';\r\n\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n    const LoopRobo = robots.map((user, i)=>{\r\n        return <Card key = {i}\r\n            id={user.id} \r\n            name={user.name} \r\n            email={user.email}/>\r\n    });\r\n    return (\r\n        <div>\r\n            {LoopRobo}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\n\r\nconst SearchBox = ({searchfield, searchchange}) => {\r\n    return (\r\n        <div>\r\n            <label for=\"searchbox\">Search</label>\r\n            <input \r\n                type = 'text' \r\n                id='searchbox'\r\n                placeholder='input here'\r\n                onChange = {searchchange}\r\n            />\r\n        </div>        \r\n    )\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div className='pa4 ma4 vh-75-ns overflow-y-scroll scrollbar '>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../component/CardList';\r\nimport SearchBox from '../component/SearchBox';\r\nimport Scroll from '../component/Scroll';\r\nimport {setSearchField, requestRobots } from '../action';\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch)=>{\r\n    return {\r\n        onSearchChange: (event)=> {\r\n            dispatch(setSearchField(event.target.value));\r\n            console.log(event.target.value)\r\n        },\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n    \r\n\r\n    render(){\r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n        const searchfilter = robots.filter(x => {\r\n            return x.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        if(isPending) {\r\n            return <h1>Loading</h1>\r\n        } else {\r\n            return (\r\n                <div className='tc'>\r\n                    <h1 style={{color:'lightblue'}}>ROBOFRIENDS</h1>\r\n                    <SearchBox searchchange={onSearchChange} />\r\n                    <Scroll className='ma3'>\r\n                        <CardList  robots={searchfilter} />\r\n                    </Scroll>\r\n                </div>   \r\n            );\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = ()=>(dispatch)=>{\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nconst intialState = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=intialState, action={})=>{\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        \r\n            default: return state\r\n    } \r\n}\r\n\r\nconst intialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=intialStateRobots, action={})=>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n        default: return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './container/App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\n\nReactDOM.render(\n          <Provider store = {store}>\n             <App />\n          </Provider>\n  ,  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}